# Wine-Quality-Prediction
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Fixed acidity</th>\n",
       "      <th>Volatile acidity</th>\n",
       "      <th>Citric acid</th>\n",
       "      <th>Residual sugar</th>\n",
       "      <th>Chlorides</th>\n",
       "      <th>Free Sulphur Dioxide</th>\n",
       "      <th>Total Sulphur Dioxide</th>\n",
       "      <th>Density</th>\n",
       "      <th>pH</th>\n",
       "      <th>Sulphates</th>\n",
       "      <th>Alcohol</th>\n",
       "      <th>Quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Type  Fixed acidity  Volatile acidity  Citric acid  Residual sugar  \\\n",
       "0     1            7.4              0.70         0.00             1.9   \n",
       "1     1            7.8              0.88         0.00             2.6   \n",
       "2     1            7.8              0.76         0.04             2.3   \n",
       "3     1           11.2              0.28         0.56             1.9   \n",
       "4     1            7.4              0.70         0.00             1.9   \n",
       "\n",
       "   Chlorides  Free Sulphur Dioxide  Total Sulphur Dioxide  Density    pH  \\\n",
       "0      0.076                  11.0                   34.0   0.9978  3.51   \n",
       "1      0.098                  25.0                   67.0   0.9968  3.20   \n",
       "2      0.092                  15.0                   54.0   0.9970  3.26   \n",
       "3      0.075                  17.0                   60.0   0.9980  3.16   \n",
       "4      0.076                  11.0                   34.0   0.9978  3.51   \n",
       "\n",
       "   Sulphates  Alcohol  Quality  \n",
       "0       0.56      9.4        5  \n",
       "1       0.68      9.8        5  \n",
       "2       0.65      9.8        5  \n",
       "3       0.58      9.8        6  \n",
       "4       0.56      9.4        5  "
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv(r\"C:\\Users\\Gyanesh\\Downloads\\PROJECT\\Wine+Quality+Dataset.csv\")\n",
    "heads=['Fixed acidity','Volatile acidity','Citric acid','Residual sugar','Chlorides','Free Sulphur Dioxide','Total Sulphur Dioxide','Density','pH','Sulphates','Alcohol']\n",
    "for col in heads:\n",
    "    data[col]=data[col].replace(\"\",np.NaN)\n",
    "    median= int(data[col].median(skipna = True))\n",
    "    data[col]=data[col].replace(np.NaN,median)\n",
    "data['Type']=data['Type'].replace(\"White\",1)\n",
    "data['Type']=data['Type'].replace(\"Red\",2)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import f1_score,confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=data.iloc[:,0:12]\n",
    "y=data.iloc[:,12]\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = StandardScaler().fit_transform(x_train)\n",
    "x_test = StandardScaler().fit_transform(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 6\n",
      "5 5\n",
      "7 7\n",
      "5 6\n",
      "6 5\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "5 4\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "7 7\n",
      "6 5\n",
      "6 5\n",
      "5 4\n",
      "6 7\n",
      "5 6\n",
      "6 6\n",
      "6 4\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "7 7\n",
      "5 5\n",
      "6 6\n",
      "6 5\n",
      "6 6\n",
      "6 5\n",
      "5 6\n",
      "6 7\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 7\n",
      "5 5\n",
      "6 7\n",
      "7 6\n",
      "7 6\n",
      "6 5\n",
      "5 5\n",
      "5 6\n",
      "6 6\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "7 6\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 6\n",
      "5 6\n",
      "5 4\n",
      "6 6\n",
      "6 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 4\n",
      "5 5\n",
      "6 7\n",
      "5 6\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "6 5\n",
      "7 8\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 7\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 7\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "5 6\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 8\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "6 4\n",
      "6 6\n",
      "6 7\n",
      "6 6\n",
      "6 5\n",
      "5 6\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 6\n",
      "5 3\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "5 6\n",
      "6 6\n",
      "6 5\n",
      "6 5\n",
      "5 5\n",
      "7 8\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "7 7\n",
      "6 7\n",
      "5 5\n",
      "5 5\n",
      "7 7\n",
      "5 5\n",
      "6 6\n",
      "7 6\n",
      "5 4\n",
      "6 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "6 5\n",
      "5 6\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 6\n",
      "5 5\n",
      "5 6\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "6 7\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "5 6\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 3\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 7\n",
      "6 6\n",
      "6 7\n",
      "6 6\n",
      "6 6\n",
      "7 7\n",
      "6 7\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 7\n",
      "5 5\n",
      "7 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 4\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "7 7\n",
      "6 6\n",
      "6 5\n",
      "6 5\n",
      "6 4\n",
      "6 5\n",
      "6 6\n",
      "6 7\n",
      "5 6\n",
      "7 6\n",
      "6 7\n",
      "5 5\n",
      "7 7\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 5\n",
      "5 6\n",
      "6 6\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "7 6\n",
      "6 4\n",
      "6 5\n",
      "5 4\n",
      "6 6\n"
     ]
    }
   ],
   "source": [
    "model=LinearRegression()\n",
    "model.fit(x_train,y_train)\n",
    "result=model.predict(x_test)\n",
    "result=np.round_(result)\n",
    "y_test=np.array(y_test)\n",
    "for i in range(len(y_test)):\n",
    "    print(int(result[i]),y_test[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 0.3875\n",
      "Mean Squared Error: 0.44375\n",
      "Root Mean Squared Error: 0.6661456297237114\n",
      "0.640625\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error:', mean_absolute_error(y_test, result))\n",
    "print('Mean Squared Error:', mean_squared_error(y_test, result))\n",
    "print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, result)))\n",
    "print(f1_score(y_test,result ,average=\"micro\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  0  0  2  0  0]\n",
      " [ 0  0  7  4  0  0]\n",
      " [ 0  0 99 32  4  0]\n",
      " [ 0  0 53 76 13  0]\n",
      " [ 0  0  3 12 12  0]\n",
      " [ 0  0  0  1  2  0]]\n",
      "0.584375\n",
      "5 6\n",
      "5 5\n",
      "7 7\n",
      "5 6\n",
      "6 5\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "5 4\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 5\n",
      "5 6\n",
      "6 6\n",
      "7 7\n",
      "5 5\n",
      "5 5\n",
      "5 4\n",
      "6 7\n",
      "6 6\n",
      "6 6\n",
      "6 4\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "7 7\n",
      "5 5\n",
      "6 6\n",
      "7 5\n",
      "5 6\n",
      "6 5\n",
      "5 6\n",
      "6 7\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 7\n",
      "5 5\n",
      "6 7\n",
      "7 6\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "5 6\n",
      "5 6\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 6\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "7 6\n",
      "6 6\n",
      "5 6\n",
      "5 6\n",
      "5 4\n",
      "5 6\n",
      "5 5\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "7 6\n",
      "6 6\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 4\n",
      "5 5\n",
      "7 7\n",
      "5 6\n",
      "7 6\n",
      "5 5\n",
      "6 6\n",
      "6 5\n",
      "7 8\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "6 5\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 7\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "5 6\n",
      "7 7\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "7 7\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "7 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "7 6\n",
      "6 6\n",
      "5 6\n",
      "6 6\n",
      "5 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 8\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "5 4\n",
      "6 6\n",
      "6 7\n",
      "7 6\n",
      "6 5\n",
      "5 6\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "6 5\n",
      "5 6\n",
      "6 6\n",
      "6 3\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "5 6\n",
      "5 6\n",
      "6 6\n",
      "5 6\n",
      "6 5\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "7 8\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "7 7\n",
      "5 7\n",
      "5 5\n",
      "5 5\n",
      "7 7\n",
      "5 5\n",
      "5 6\n",
      "6 6\n",
      "5 4\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 6\n",
      "5 5\n",
      "5 6\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "6 7\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "6 6\n",
      "6 5\n",
      "7 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "7 5\n",
      "6 6\n",
      "5 6\n",
      "6 5\n",
      "5 6\n",
      "7 6\n",
      "5 6\n",
      "6 3\n",
      "5 6\n",
      "5 5\n",
      "6 5\n",
      "5 7\n",
      "5 6\n",
      "7 7\n",
      "6 6\n",
      "6 6\n",
      "7 7\n",
      "6 7\n",
      "6 6\n",
      "6 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "7 6\n",
      "6 5\n",
      "6 5\n",
      "6 5\n",
      "5 6\n",
      "6 6\n",
      "6 5\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "6 7\n",
      "5 5\n",
      "7 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 4\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "5 7\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "6 4\n",
      "7 5\n",
      "6 6\n",
      "7 7\n",
      "5 6\n",
      "6 6\n",
      "6 7\n",
      "6 5\n",
      "7 7\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 5\n",
      "5 5\n",
      "7 6\n",
      "5 6\n",
      "6 5\n",
      "6 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "6 6\n",
      "5 6\n",
      "6 6\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 6\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "5 5\n",
      "5 5\n",
      "5 5\n",
      "6 6\n",
      "6 4\n",
      "7 5\n",
      "5 4\n",
      "7 6\n"
     ]
    }
   ],
   "source": [
    "model2=KNeighborsClassifier(n_neighbors=10,p=10,metric=\"euclidean\")\n",
    "model2.fit(x_train,y_train)\n",
    "result=model2.predict(x_test)\n",
    "y_test=np.array(y_test)\n",
    "print(confusion_matrix(y_test,result))\n",
    "print(f1_score(y_test,result ,average=\"micro\"))\n",
    "y_test=np.array(y_test)\n",
    "for i in range(len(result)):\n",
    "    print(result[i],y_test[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
